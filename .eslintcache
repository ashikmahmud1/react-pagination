[{"/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/index.js":"1","/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/App.js":"2","/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/reportWebVitals.js":"3","/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/components/Pagination.js":"4","/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/components/CountryCard.js":"5"},{"size":548,"mtime":1609300177846,"results":"6","hashOfConfig":"7"},{"size":2977,"mtime":1609302937865,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609252078473,"results":"9","hashOfConfig":"7"},{"size":6577,"mtime":1609303015050,"results":"10","hashOfConfig":"7"},{"size":1292,"mtime":1609300318050,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1fosp2s",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/index.js",[],["25","26"],"/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/App.js",["27"],"import React, {useState, useEffect} from \"react\"\nimport './App.css';\nimport CountryCard from \"./components/CountryCard\";\nimport * as Countries from \"countries-api\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n    const [allCountries, setAllCountries] = useState([]);\n    const [totalPages, setTotalPages] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [currentCountries, setCurrentCountries] = useState([]);\n    const pageLimit = 10;\n\n    const onPageChanged = data => {\n        const {currentPage, totalPages, pageLimit} = data;\n        const offset = (currentPage - 1) * pageLimit;\n        const currentCountries = allCountries.slice(offset, offset + pageLimit);\n\n        setTotalPages(totalPages);\n        setCurrentPage(currentPage);\n        setCurrentCountries(currentCountries);\n    }\n    const getAllCountries = () => {\n        const {data: allCountries = []} = Countries.findAll();\n        const offset = (currentPage - 1) * pageLimit;\n        const currentCountries = allCountries.slice(offset, offset + pageLimit);\n        const totalPages = Math.ceil(allCountries.length / pageLimit);\n        setCurrentCountries(currentCountries);\n        setAllCountries(allCountries);\n        setTotalPages(totalPages);\n    }\n    useEffect(() => {\n        console.log('effect');\n        getAllCountries();\n        return () => {\n            console.log('cleaned up');\n        };\n    }, [allCountries]);\n    return (\n        <div className=\"container mb-5\">\n            <div className=\"row d-flex flex-row py-5\">\n                <div className=\"w-100 px-4 py-5 d-flex flex-row flex-wrap align-items-center justify-content-between\">\n                    <div className=\"d-flex flex-row align-items-center\">\n                        <h2 className=\"border-gray border-right\">\n                            <strong className=\"text-secondary\">{allCountries.length}</strong> Countries\n                        </h2>\n                        {currentPage && (\n                            <span className=\"current-page d-inline-block h-100 pl-4 text-secondary\">\n                  Page <span className=\"font-weight-bold\">{currentPage}</span> / <span\n                                className=\"font-weight-bold\">{totalPages}</span>\n                </span>\n                        )}\n                    </div>\n                    <div className=\"d-flex flex-row py-4 align-items-center\">\n                        {\n                            allCountries.length > 0 && (\n                                <Pagination totalRecords={allCountries.length} pageLimit={pageLimit} pageNeighbours={1}\n                                            onPageChanged={onPageChanged}/>\n                            )\n                        }\n                    </div>\n                </div>\n                {currentCountries.map(country => <CountryCard key={country.cca3} country={country}/>)}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/reportWebVitals.js",[],"/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/components/Pagination.js",["28","29","30"],"import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\n// ...\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\n/**\n * Helper method for creating a range of numbers\n * range(1, 5) => [1, 2, 3, 4, 5]\n */\nconst range = (from, to, step = 1) => {\n    let i = from;\n    const range = [];\n\n    while (i <= to) {\n        range.push(i);\n        i += step;\n    }\n\n    return range;\n}\n\nclass Pagination extends Component {\n    constructor(props) {\n        super(props);\n        const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\n\n        this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n        this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\n\n        // pageNeighbours can be: 0, 1 or 2\n        this.pageNeighbours = typeof pageNeighbours === 'number'\n            ? Math.max(0, Math.min(pageNeighbours, 2))\n            : 0;\n\n        this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n        this.state = { currentPage: 1 };\n    }\n\n    // ...\n\n    /**\n     * Let's say we have 10 pages and we set pageNeighbours to 2\n     * Given that the current page is 6\n     * The pagination control will look like the following:\n     *\n     * (1) < {4 5} [6] {7 8} > (10)\n     *\n     * (x) => terminal pages: first and last page(always visible)\n     * [x] => represents current page\n     * {...x} => represents page neighbours\n     */\n    fetchPageNumbers = () => {\n        const totalPages = this.totalPages;\n        const currentPage = this.state.currentPage;\n        const pageNeighbours = this.pageNeighbours;\n\n        /**\n         * totalNumbers: the total page numbers to show on the control\n         * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n         */\n        const totalNumbers = (this.pageNeighbours * 2) + 3;\n        const totalBlocks = totalNumbers + 2;\n\n        if (totalPages > totalBlocks) {\n            const startPage = Math.max(2, currentPage - pageNeighbours);\n            const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n            let pages = range(startPage, endPage);\n\n            /**\n             * hasLeftSpill: has hidden pages to the left\n             * hasRightSpill: has hidden pages to the right\n             * spillOffset: number of hidden pages either to the left or to the right\n             */\n            const hasLeftSpill = startPage > 2;\n            const hasRightSpill = (totalPages - endPage) > 1;\n            const spillOffset = totalNumbers - (pages.length + 1);\n\n            switch (true) {\n                // handle: (1) < {5 6} [7] {8 9} (10)\n                case (hasLeftSpill && !hasRightSpill): {\n                    const extraPages = range(startPage - spillOffset, startPage - 1);\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\n                    break;\n                }\n\n                // handle: (1) {2 3} [4] {5 6} > (10)\n                case (!hasLeftSpill && hasRightSpill): {\n                    const extraPages = range(endPage + 1, endPage + spillOffset);\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\n                    break;\n                }\n\n                // handle: (1) < {4 5} [6] {7 8} > (10)\n                case (hasLeftSpill && hasRightSpill):\n                default: {\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n                    break;\n                }\n            }\n\n            return [1, ...pages, totalPages];\n        }\n\n        return range(1, totalPages);\n    }\n\n    // ...\n\n    componentDidMount() {\n        this.gotoPage(1);\n    }\n\n    gotoPage = page => {\n        const { onPageChanged = f => f } = this.props;\n        const currentPage = Math.max(0, Math.min(page, this.totalPages));\n        const paginationData = {\n            currentPage,\n            totalPages: this.totalPages,\n            pageLimit: this.pageLimit,\n            totalRecords: this.totalRecords\n        };\n\n        this.setState({ currentPage }, () => onPageChanged(paginationData));\n    }\n\n    handleClick = page => evt => {\n        evt.preventDefault();\n        this.gotoPage(page);\n    }\n\n    handleMoveLeft = evt => {\n        evt.preventDefault();\n        this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\n    }\n\n    handleMoveRight = evt => {\n        evt.preventDefault();\n        this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\n    }\n\n    // ...\n\n    render() {\n        if (!this.totalRecords || this.totalPages === 1) return null;\n\n        const { currentPage } = this.state;\n        const pages = this.fetchPageNumbers();\n\n        return (\n            <Fragment>\n                <nav aria-label=\"Countries Pagination\">\n                    <ul className=\"pagination\">\n                        { pages.map((page, index) => {\n\n                            if (page === LEFT_PAGE) return (\n                                <li key={index} className=\"page-item\">\n                                    <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\n                                        <span aria-hidden=\"true\">&laquo;</span>\n                                        <span className=\"sr-only\">Previous</span>\n                                    </a>\n                                </li>\n                            );\n\n                            if (page === RIGHT_PAGE) return (\n                                <li key={index} className=\"page-item\">\n                                    <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\n                                        <span aria-hidden=\"true\">&raquo;</span>\n                                        <span className=\"sr-only\">Next</span>\n                                    </a>\n                                </li>\n                            );\n\n                            return (\n                                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\n                                    <a className=\"page-link\" href=\"#\" onClick={ this.handleClick(page) }>{ page }</a>\n                                </li>\n                            );\n\n                        }) }\n\n                    </ul>\n                </nav>\n            </Fragment>\n        );\n    }\n}\n\nPagination.propTypes = {\n    totalRecords: PropTypes.number.isRequired,\n    pageLimit: PropTypes.number,\n    pageNeighbours: PropTypes.number,\n    onPageChanged: PropTypes.func\n};\n\nexport default Pagination;","/Users/ashikmahmud/Documents/WebStrom/react-pagination/src/components/CountryCard.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":38,"column":8,"nodeType":"37","endLine":38,"endColumn":22,"suggestions":"38"},{"ruleId":"39","severity":1,"message":"40","line":161,"column":37,"nodeType":"41","endLine":161,"endColumn":123},{"ruleId":"39","severity":1,"message":"40","line":170,"column":37,"nodeType":"41","endLine":170,"endColumn":120},{"ruleId":"39","severity":1,"message":"40","line":179,"column":37,"nodeType":"41","endLine":179,"endColumn":106},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllCountries'. Either include it or remove the dependency array.","ArrayExpression",["44"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"45","fix":"46"},"Update the dependencies array to be: [allCountries, getAllCountries]",{"range":"47","text":"48"},[1440,1454],"[allCountries, getAllCountries]"]